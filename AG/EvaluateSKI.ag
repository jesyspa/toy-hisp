module {AG.EvaluateSKI} {} {}
imports
{
import SKI
import Visualisation
}

include "AG/SKI.ag"

attr SKI
    inh argument :: SKI
    syn result :: SKI
    syn copy :: self

sem SKI
    | App x.argument = @y.copy
          lhs.result = @x.result
    | Name lhs.result = case @x of
                          "$I" -> @lhs.argument
                          "$K" -> K_One @lhs.argument
                          "$S" -> S_One @lhs.argument
                          x -> Name $ x ++ "{" ++ show @lhs.argument ++ "}"
    | Constant lhs.result = error "Trying to apply a constant"
    | K_One lhs.result = @y.copy
    | S_One lhs.result = S_Two @x.copy @lhs.argument
    | S_Two x.argument = @lhs.argument
            y.argument = @lhs.argument
            lhs.result = evaluate @x.result @y.result

{
evaluate e x = result_Syn_SKI $ wrap_SKI (sem_SKI e) $ Inh_SKI x
}
