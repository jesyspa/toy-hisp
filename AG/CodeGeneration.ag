module {AG.CodeGeneration} {} {}
imports
{
import Hisp
import SKI
}

include "AG/Hisp.ag"
include "AG/SKI.ag"

attr HispExpr
    syn variables use {++} {[]} :: {[Ident]}
    syn code :: SKI
    inh parameters :: {[Ident]}

sem HispExpr
    | Variable lhs.variables = [@name]
               lhs.code = paramFold (Name @name) @lhs.parameters
    | Number   lhs.code = paramFold (Constant @value) @lhs.parameters
    | Application lhs.code = paramFold (App @f.code @x.code) @lhs.parameters
    | Lambda   expr.parameters = @x : @lhs.parameters

{
name = Name . ('$':)
app = App . name

paramFold = foldl skiFold

skiFold :: SKI -> Ident -> SKI
skiFold (Constant n) param = app "K" $ Constant n
skiFold c@(Name x) param | x == param = name "I"
                         | otherwise = app "K" c
skiFold (App f x) param = App (app "S" (skiFold f param)) $ skiFold x param

compile = fst . flip sem_HispExpr []
}
