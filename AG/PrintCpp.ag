module {AG.PrintCpp} {}
{
import Cpp
import qualified Data.Set as S
import Text.PrettyPrint.HughesPJ
}

include "AG/Cpp.ag"

attr CppExpr CppStmt
    syn visual :: Doc

attr CppExprs CppStmts CppDoc
    syn visual :: {[Doc]}

sem CppExpr
    | Var   lhs.visual = text @x
    | Num   lhs.visual = int @x
    | Call  lhs.visual = text @f <> (cat $ lparen : punctuate (text ", ") @x.visual) <> rparen

sem CppExprs CppStmts
    | Cons  lhs.visual = @hd.visual : @tl.visual
    | Nil   lhs.visual = []

sem CppStmt
    | FunDef lhs.visual = text @rt <+> text @name <> text "()" $+$ @body.visual
    | Block  lhs.visual = lbrace $+$ nest 4 (vcat @body.visual) $+$ rbrace
    | Include lhs.visual = text "#include" <+> doubleQuotes (text @file)
    | VarDef lhs.visual = text "auto" <+> text @name <+> equals <+> @init.visual <> semi
    | Expr   lhs.visual = @expr.visual <> semi

{

instance Show CppDoc where
    show = render . vcat . sem_CppDoc
}

