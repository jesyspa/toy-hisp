module {AG.ToCpp} {}
{
import SKI
import qualified Cpp
}

include "AG/SKI.ag"

attr SKI
    syn cpp :: {Cpp.Cpp}

sem SKI
    | S     lhs.cpp = Cpp.Var "comb_s"
    | K     lhs.cpp = Cpp.Var "comb_k"
    | I     lhs.cpp = Cpp.Var "comb_i"
    | L     lhs.cpp = Cpp.Var "comb_l"
    | R     lhs.cpp = Cpp.Var "comb_r"
    | App   lhs.cpp = @x.cpp `Cpp.App` @y.cpp
    | Name  lhs.cpp = Cpp.Var @x
    | Constant lhs.cpp = Cpp.Num @x

{
ski2cpp = sem_SKI
}
