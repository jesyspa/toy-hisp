module {AG.ToCpp} {}
{
import SKI
import qualified Cpp
}

include "AG/SKI.ag"

attr SKI
    syn cpp :: {Cpp.CppExpr}

sem SKI
    | S     lhs.cpp = Cpp.Var "comb_s"
    | K     lhs.cpp = Cpp.Var "comb_k"
    | I     lhs.cpp = Cpp.Var "comb_i"
    | L     lhs.cpp = Cpp.Var "comb_l"
    | R     lhs.cpp = Cpp.Var "comb_r"
    | App   lhs.cpp = Cpp.Call "mk_app" [@x.cpp, @y.cpp]
    | Name  lhs.cpp = Cpp.Var @x
    | Constant lhs.cpp = Cpp.Num @x

{
addTopLevel tree = Cpp.File [Cpp.Include "runtime/main.hpp", Cpp.Include "runtime/construct.hpp", main]
    where main = Cpp.FunDef "int" "main" $ Cpp.Block [
                     Cpp.Block [
                         Cpp.VarDef "tree" tree,
                         Cpp.Expr $ Cpp.Call "eval" [Cpp.Var "tree"]],
                     Cpp.Expr $ Cpp.Call "clear_tmp_roots" [],
                     Cpp.Expr $ Cpp.Call "collect_garbage" []]
ski2cpp = addTopLevel . sem_SKI
}
